{"version":3,"sources":["logo.svg","pages/main/index.js","App.js","pages/rule/index.js","serviceWorker.js","index.js"],"names":["module","exports","Main","className","src","logo","alt","to","href","target","rel","Routes","id","path","component","exact","props","state","data","columns","title","dataIndex","key","render","text","child","r","index","map","item","onClick","choose","version","params","name","this","axios","post","then","res","code","success","error","message","get","setState","type","percent","dataSource","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,kC,sOC2B1BC,MArBjB,WACI,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,2BACE,kBAAC,IAAD,CAAMC,GAAG,SAAT,6BAEF,uBACEJ,UAAU,WACVK,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,2C,gJCTJC,G,OAAS,CACX,CACIC,GAAI,IACJC,KAAM,IACNC,UAAWZ,EACXa,OAAO,GAEX,CACIH,GAAI,OACJC,KAAM,QACNC,U,YCTN,WAAYE,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,IAGR,EAAKC,QAAU,CACb,CACEC,MAAO,qBACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAAAC,GAAI,OAAI,2BAAIA,KAEtB,CACEJ,MAAO,eACPC,UAAW,QACXC,IAAK,QACLC,OAAQ,SAACE,EAAMC,EAAEC,GAAT,OAAmBF,EAAMG,KAAI,SAACC,GAAD,OAAQ,0BAAMP,IAAKO,EAAMC,QAAS,WAAK,EAAKC,OAAOJ,EAAME,KAASA,SAjB3F,E,oEAsBXF,EAAMK,GAAS,IAEdC,EAAS,CACbC,KAFaC,KAAKlB,MAAbC,KAEMS,GAAOO,KAClBF,WAGFI,IAAMC,KAAK,2CAA2CJ,GAAQK,MAAK,SAACC,GAC7C,MAAlBA,EAAIrB,KAAKsB,KACV,IAAQC,QAAQ,4EAEhB,IAAQC,MAAMH,EAAIrB,KAAKyB,c,0CAKT,IAAD,OACjBP,IAAMQ,IAAI,iCAAiCN,MAAK,SAACC,GAC/C,EAAKM,SAAS,CACZ3B,KAAMqB,EAAIrB,Y,+BAMd,OACE,yBAAKf,UAAU,kBACX,gCACE,uBAAU2C,KAAK,SAASC,QAAS,MAEnC,uBAAO5B,QAASgB,KAAKhB,QAAS6B,WAAYb,KAAKlB,MAAMC,Y,GArD5C+B,IAAMC,WDWjBnC,OAAO,KAgBAoC,EAZH,WACR,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KAEQxC,EAAOiB,KAAI,SAACC,GAAD,OAAU,kBAAC,IAAD,CAAOP,IAAKO,EAAKhB,KAAMA,KAAMgB,EAAKhB,KAAME,MAAOc,EAAKd,MAAOD,UAAWe,EAAKf,kBEbhGsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlC,OAAO,kBAAC,EAAD,MAASmC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLwB,QAAQxB,MAAMA,EAAMC,c","file":"static/js/main.5b1bc380.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from '../../logo.svg';\nimport { Link } from 'react-router-dom';\n\nimport '../../App.css';\n\nfunction Main() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            <Link to='/rule'>发布平台</Link>\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            前端发布平台\n          </a>\n        </header>\n      </div>\n    );\n  }\n  \n  export default Main;","import React from 'react';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport Main from './pages/main';\nimport Rule from './pages/rule';\n\nconst Routes = [\n    {\n        id: '/',\n        path: '/',\n        component: Main,\n        exact: true,\n    },\n    {\n        id: 'site',\n        path: '/site',\n        component: Rule,\n        exact: true,\n    },\n];\n\nconst App = () => {\n    return (\n        <Router >\n            <Switch>\n                {\n                    Routes.map((item) => <Route key={item.path} path={item.path} exact={item.exact} component={item.component} />)\n                }\n            </Switch>\n        </Router>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport { Table, message, Progress } from 'antd';\nimport axios from 'axios';\nimport './style.css';\n\nclass Rule extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      data: []\n    }\n\n    this.columns = [\n      {\n        title: '项目名',\n        dataIndex: 'name',\n        key: 'name',\n        render: text => <a>{text}</a>,\n      },\n      {\n        title: '版本',\n        dataIndex: 'child',\n        key: 'child',\n        render: (child,r,index) => child.map((item)=><span key={item} onClick={()=>{this.choose(index,item)}}>{item}</span>),\n      },\n    ];\n  }\n\n  choose(index,version){\n    const {data} = this.state\n    const params = {\n      name: data[index].name,\n      version\n    }\n\n    axios.post('http://tianjian.work/api/list/setVersion',params).then((res)=>{\n      if(res.data.code === '0'){\n        message.success('设置版本成功，请刷新界面')\n      }else{\n        message.error(res.data.message)\n      }\n    })\n  }\n\n  componentDidMount(){\n    axios.get('http://tianjian.work/api/list').then((res)=>{\n      this.setState({\n        data: res.data\n      })\n    })\n  }\n  \n  render(){\n    return (\n      <div className=\"rule_container\">\n          <header>\n            <Progress type=\"circle\" percent={10} />\n          </header>\n          <Table columns={this.columns} dataSource={this.state.data} />\n      </div>\n    );\n  }\n}\n  \nexport default Rule;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}